// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/isfk/aio/srv/role/proto/role"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Service service

func NewServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Service service

type Service interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	Delete(ctx context.Context, in *User, opts ...client.CallOption) (*User, error)
	InfoByID(ctx context.Context, in *ID, opts ...client.CallOption) (*User, error)
	InfoByUsername(ctx context.Context, in *Username, opts ...client.CallOption) (*User, error)
	InfoByPhone(ctx context.Context, in *Phone, opts ...client.CallOption) (*User, error)
	InfoByEmail(ctx context.Context, in *Email, opts ...client.CallOption) (*User, error)
	ListByPage(ctx context.Context, in *ListReq, opts ...client.CallOption) (*UserList, error)
	UpdatePassword(ctx context.Context, in *IDPassword, opts ...client.CallOption) (*User, error)
	CreateUserRole(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error)
	DeleteUserRole(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error)
	UserRoleInfo(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error)
	UserRoleListByUID(ctx context.Context, in *UID, opts ...client.CallOption) (*UserRoleList, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) Create(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.Create", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Update(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.Update", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Delete(ctx context.Context, in *User, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.Delete", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByID(ctx context.Context, in *ID, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByID", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByUsername(ctx context.Context, in *Username, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByUsername", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByPhone(ctx context.Context, in *Phone, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByPhone", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByEmail(ctx context.Context, in *Email, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByEmail", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ListByPage(ctx context.Context, in *ListReq, opts ...client.CallOption) (*UserList, error) {
	req := c.c.NewRequest(c.name, "Service.ListByPage", in)
	out := new(UserList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UpdatePassword(ctx context.Context, in *IDPassword, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "Service.UpdatePassword", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) CreateUserRole(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error) {
	req := c.c.NewRequest(c.name, "Service.CreateUserRole", in)
	out := new(UserRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) DeleteUserRole(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error) {
	req := c.c.NewRequest(c.name, "Service.DeleteUserRole", in)
	out := new(UserRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UserRoleInfo(ctx context.Context, in *UserRole, opts ...client.CallOption) (*UserRole, error) {
	req := c.c.NewRequest(c.name, "Service.UserRoleInfo", in)
	out := new(UserRole)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) UserRoleListByUID(ctx context.Context, in *UID, opts ...client.CallOption) (*UserRoleList, error) {
	req := c.c.NewRequest(c.name, "Service.UserRoleListByUID", in)
	out := new(UserRoleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Create(context.Context, *User, *User) error
	Update(context.Context, *User, *User) error
	Delete(context.Context, *User, *User) error
	InfoByID(context.Context, *ID, *User) error
	InfoByUsername(context.Context, *Username, *User) error
	InfoByPhone(context.Context, *Phone, *User) error
	InfoByEmail(context.Context, *Email, *User) error
	ListByPage(context.Context, *ListReq, *UserList) error
	UpdatePassword(context.Context, *IDPassword, *User) error
	CreateUserRole(context.Context, *UserRole, *UserRole) error
	DeleteUserRole(context.Context, *UserRole, *UserRole) error
	UserRoleInfo(context.Context, *UserRole, *UserRole) error
	UserRoleListByUID(context.Context, *UID, *UserRoleList) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) error {
	type service interface {
		Create(ctx context.Context, in *User, out *User) error
		Update(ctx context.Context, in *User, out *User) error
		Delete(ctx context.Context, in *User, out *User) error
		InfoByID(ctx context.Context, in *ID, out *User) error
		InfoByUsername(ctx context.Context, in *Username, out *User) error
		InfoByPhone(ctx context.Context, in *Phone, out *User) error
		InfoByEmail(ctx context.Context, in *Email, out *User) error
		ListByPage(ctx context.Context, in *ListReq, out *UserList) error
		UpdatePassword(ctx context.Context, in *IDPassword, out *User) error
		CreateUserRole(ctx context.Context, in *UserRole, out *UserRole) error
		DeleteUserRole(ctx context.Context, in *UserRole, out *UserRole) error
		UserRoleInfo(ctx context.Context, in *UserRole, out *UserRole) error
		UserRoleListByUID(ctx context.Context, in *UID, out *UserRoleList) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) Create(ctx context.Context, in *User, out *User) error {
	return h.ServiceHandler.Create(ctx, in, out)
}

func (h *serviceHandler) Update(ctx context.Context, in *User, out *User) error {
	return h.ServiceHandler.Update(ctx, in, out)
}

func (h *serviceHandler) Delete(ctx context.Context, in *User, out *User) error {
	return h.ServiceHandler.Delete(ctx, in, out)
}

func (h *serviceHandler) InfoByID(ctx context.Context, in *ID, out *User) error {
	return h.ServiceHandler.InfoByID(ctx, in, out)
}

func (h *serviceHandler) InfoByUsername(ctx context.Context, in *Username, out *User) error {
	return h.ServiceHandler.InfoByUsername(ctx, in, out)
}

func (h *serviceHandler) InfoByPhone(ctx context.Context, in *Phone, out *User) error {
	return h.ServiceHandler.InfoByPhone(ctx, in, out)
}

func (h *serviceHandler) InfoByEmail(ctx context.Context, in *Email, out *User) error {
	return h.ServiceHandler.InfoByEmail(ctx, in, out)
}

func (h *serviceHandler) ListByPage(ctx context.Context, in *ListReq, out *UserList) error {
	return h.ServiceHandler.ListByPage(ctx, in, out)
}

func (h *serviceHandler) UpdatePassword(ctx context.Context, in *IDPassword, out *User) error {
	return h.ServiceHandler.UpdatePassword(ctx, in, out)
}

func (h *serviceHandler) CreateUserRole(ctx context.Context, in *UserRole, out *UserRole) error {
	return h.ServiceHandler.CreateUserRole(ctx, in, out)
}

func (h *serviceHandler) DeleteUserRole(ctx context.Context, in *UserRole, out *UserRole) error {
	return h.ServiceHandler.DeleteUserRole(ctx, in, out)
}

func (h *serviceHandler) UserRoleInfo(ctx context.Context, in *UserRole, out *UserRole) error {
	return h.ServiceHandler.UserRoleInfo(ctx, in, out)
}

func (h *serviceHandler) UserRoleListByUID(ctx context.Context, in *UID, out *UserRoleList) error {
	return h.ServiceHandler.UserRoleListByUID(ctx, in, out)
}
