// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role.proto

package role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Service service

func NewServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Service service

type Service interface {
	Create(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error)
	Update(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error)
	Delete(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error)
	InfoByID(ctx context.Context, in *ID, opts ...client.CallOption) (*Role, error)
	InfoByName(ctx context.Context, in *Name, opts ...client.CallOption) (*Role, error)
	ListByPage(ctx context.Context, in *ListReq, opts ...client.CallOption) (*RoleList, error)
	// 规则、API、菜单
	RuleList(ctx context.Context, in *Null, opts ...client.CallOption) (*RuleListRet, error)
	MenuList(ctx context.Context, in *Null, opts ...client.CallOption) (*MenuListRet, error)
}

type service struct {
	c    client.Client
	name string
}

func NewService(name string, c client.Client) Service {
	return &service{
		c:    c,
		name: name,
	}
}

func (c *service) Create(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Service.Create", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Update(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Service.Update", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) Delete(ctx context.Context, in *Role, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Service.Delete", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByID(ctx context.Context, in *ID, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByID", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) InfoByName(ctx context.Context, in *Name, opts ...client.CallOption) (*Role, error) {
	req := c.c.NewRequest(c.name, "Service.InfoByName", in)
	out := new(Role)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) ListByPage(ctx context.Context, in *ListReq, opts ...client.CallOption) (*RoleList, error) {
	req := c.c.NewRequest(c.name, "Service.ListByPage", in)
	out := new(RoleList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) RuleList(ctx context.Context, in *Null, opts ...client.CallOption) (*RuleListRet, error) {
	req := c.c.NewRequest(c.name, "Service.RuleList", in)
	out := new(RuleListRet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *service) MenuList(ctx context.Context, in *Null, opts ...client.CallOption) (*MenuListRet, error) {
	req := c.c.NewRequest(c.name, "Service.MenuList", in)
	out := new(MenuListRet)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Create(context.Context, *Role, *Role) error
	Update(context.Context, *Role, *Role) error
	Delete(context.Context, *Role, *Role) error
	InfoByID(context.Context, *ID, *Role) error
	InfoByName(context.Context, *Name, *Role) error
	ListByPage(context.Context, *ListReq, *RoleList) error
	// 规则、API、菜单
	RuleList(context.Context, *Null, *RuleListRet) error
	MenuList(context.Context, *Null, *MenuListRet) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) error {
	type service interface {
		Create(ctx context.Context, in *Role, out *Role) error
		Update(ctx context.Context, in *Role, out *Role) error
		Delete(ctx context.Context, in *Role, out *Role) error
		InfoByID(ctx context.Context, in *ID, out *Role) error
		InfoByName(ctx context.Context, in *Name, out *Role) error
		ListByPage(ctx context.Context, in *ListReq, out *RoleList) error
		RuleList(ctx context.Context, in *Null, out *RuleListRet) error
		MenuList(ctx context.Context, in *Null, out *MenuListRet) error
	}
	type Service struct {
		service
	}
	h := &serviceHandler{hdlr}
	return s.Handle(s.NewHandler(&Service{h}, opts...))
}

type serviceHandler struct {
	ServiceHandler
}

func (h *serviceHandler) Create(ctx context.Context, in *Role, out *Role) error {
	return h.ServiceHandler.Create(ctx, in, out)
}

func (h *serviceHandler) Update(ctx context.Context, in *Role, out *Role) error {
	return h.ServiceHandler.Update(ctx, in, out)
}

func (h *serviceHandler) Delete(ctx context.Context, in *Role, out *Role) error {
	return h.ServiceHandler.Delete(ctx, in, out)
}

func (h *serviceHandler) InfoByID(ctx context.Context, in *ID, out *Role) error {
	return h.ServiceHandler.InfoByID(ctx, in, out)
}

func (h *serviceHandler) InfoByName(ctx context.Context, in *Name, out *Role) error {
	return h.ServiceHandler.InfoByName(ctx, in, out)
}

func (h *serviceHandler) ListByPage(ctx context.Context, in *ListReq, out *RoleList) error {
	return h.ServiceHandler.ListByPage(ctx, in, out)
}

func (h *serviceHandler) RuleList(ctx context.Context, in *Null, out *RuleListRet) error {
	return h.ServiceHandler.RuleList(ctx, in, out)
}

func (h *serviceHandler) MenuList(ctx context.Context, in *Null, out *MenuListRet) error {
	return h.ServiceHandler.MenuList(ctx, in, out)
}
